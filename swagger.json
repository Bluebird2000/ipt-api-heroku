{
  "swagger": "2.0",
  "info": {
    "description": "",
    "version": "1.0.0",
    "title": "Ipt API documentation",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "olamilekanahmad7@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "ipt-api-deploy.herokuapp.com",
  "basePath": "/v1",
  "tags": [
    {
      "name": "user",
      "description": "All endpoints related to user management",
      "externalDocs": {
        "description": "",
        "url": "https://ipt-api-deploy.herokuapp.com"
      }
    },
    
    
    
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }
    
    
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/product": {
      "post": {
        "tags": [
          "product"
        ],
        "summary": "Add a new product to store",
        "description": "",
        "operationId": "addProduct",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product that needs to be added store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petproduct_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      
    },
   
    "/products": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Returns list of available products",
        "description": "get all list of product",
        "operationId": "getInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "status: success, data: {}"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/product/update/product_id": {
      "put": {
        "tags": [
          "product"
        ],
        "summary": "Update product by ID",
        "description": "",
        "operationId": "updateProduct",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "find and update product by ID",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "status:success, data:{}",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },

    "/product/update/status/product_id": {
      "put": {
        "tags": [
          "product"
        ],
        "summary": "Update product status",
        "description": "",
        "operationId": "updateProductStatus",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "find and update product by ID",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "status:success, data:{}",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },    
    
    "/product/product_id": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Find product by ID",
        "description": "",
        "operationId": "getProductById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "status:success, data:{}",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "get users",
        "description": "",
        "operationId": "getUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "status: success, data: {}"
          }
        }
      }
    },
    
      "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "parameters required to successfully create new account",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "status: success, data: {}"
          }
        }
      }
    },
    
      "/user/update/status/user_id": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user status",
        "description": "",
        "operationId": "UpdateUser Status",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "parameters required to successfully change user status",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserStatus"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "status: success, data: {}"
          }
        }
      }
    },
  
    "/user/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "email address",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "password",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "x-auth": {
                "type": "string",
                "description": "token {}"
              },
              "x-auth Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid email or password supplied"
          }
        }
      }
    },
    
    "/user/logout/user_id": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/user_id": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user id",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "status: success, data {}",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid user_id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user_id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      
      
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "400": {
            "description": "Invalid user_id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petproduct_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petproduct.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    
    "UserStatus": {
      "type": "object",
      "properties": {
        "sttatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "UserStatus"
      }
    },
    "ProductStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "UserStatus"
      }
    },
    
    "Product": {
      "type": "object",
      "properties": {
        "product_name": {
          "type": "string"
        },
        "product_description": {
          "type": "string"
        },
        "product_type": {
          "type": "string"
        },
        "cost": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Product"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}